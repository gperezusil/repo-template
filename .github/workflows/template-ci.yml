name: "Template CI/CD DevOps"

on:
  workflow_call:
    inputs:
      image_name:
        description: 'Nombre de imagen (ej: myapp)'
        required: true
        type: string
      acr_name:
        description: 'ACR registry (ej: myregistry.azurecr.io)'
        required: true
        type: string
      deploy:
        description: 'Si ejecutar despliegue (true/false)'
        required: false
        type: boolean
        default: true
      kubeconfig:
        description: 'base64 kubeconfig (opcional si usas OIDC/azure/login)'
        required: false
        type: string
      azure_oidc:
        description: 'Habilitar autenticaciÃ³n OIDC -> Azure (true/false)'
        required: false
        type: boolean
        default: false
      staging_url:
        description: 'URL staging para DAST (opcional)'
        required: false
        type: string

    secrets:
      ACR_USERNAME:
        required: false
      ACR_PASSWORD:
        required: false
      AZURE_CLIENT_ID:
        required: false
      AZURE_TENANT_ID:
        required: false
      AZURE_SUBSCRIPTION_ID:
        required: false
      KUBE_CONFIG_DATA:
        required: false
      SEMGREP_RULES_URL:
        required: false

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect project type and setup environment
        id: detect
        run: |
          echo "Detecting project type..."
          
          if [ -f "package.json" ]; then
            echo "PROJECT_TYPE=nodejs" >> $GITHUB_OUTPUT
            echo "Detected Node.js project"
          elif [ -f "requirements.txt" ] || [ -f "pyproject.toml" ] || [ -d "app" ]; then
            echo "PROJECT_TYPE=python" >> $GITHUB_OUTPUT
            echo "Detected Python project"
          elif [ -f "pom.xml" ] || [ -f "build.gradle" ]; then
            echo "PROJECT_TYPE=java" >> $GITHUB_OUTPUT
            echo "Detected Java project"
          else
            echo "PROJECT_TYPE=unknown" >> $GITHUB_OUTPUT
            echo "Unknown project type"
          fi

      - name: Setup Node.js
        if: steps.detect.outputs.PROJECT_TYPE == 'nodejs'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Python
        if: steps.detect.outputs.PROJECT_TYPE == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Run unit tests and coverage
        run: |
          case "${{ steps.detect.outputs.PROJECT_TYPE }}" in
            "nodejs")
              echo "Running Node.js tests..."
              npm ci
              npm run test --if-present || echo "No tests found or tests failed"
              ;;
            "python")
              echo "Running Python tests..."
              if [ -f "requirements.txt" ]; then
                python -m pip install --upgrade pip
                python -m pip install -r requirements.txt
              fi
              if [ -f "requirements-dev.txt" ]; then
                python -m pip install -r requirements-dev.txt
              fi
              python -m pytest --maxfail=1 --disable-warnings -v || echo "No tests found or tests failed"
              ;;
            *)
              echo "No test runner detected for project type: ${{ steps.detect.outputs.PROJECT_TYPE }}"
              ;;
          esac

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ steps.detect.outputs.PROJECT_TYPE == 'nodejs' && 'javascript' || steps.detect.outputs.PROJECT_TYPE == 'python' && 'python' || 'javascript,python' }}

      - name: Autobuild for CodeQL
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Semgrep SAST scan
        env:
          SEMGREP_RULES_URL: ${{ secrets.SEMGREP_RULES_URL }}
        if: env.SEMGREP_RULES_URL != ''
        run: |
          echo "Running Semgrep with custom rules..."
          pip install semgrep
          semgrep --config=$SEMGREP_RULES_URL --json --output=semgrep-results.json .

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (no push)
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ inputs.acr_name }}/${{ inputs.image_name }}:ci-${{ github.run_id }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ inputs.acr_name }}/${{ inputs.image_name }}:ci-${{ github.run_id }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Login to Azure Container Registry (Username/Password)
        env:
          ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
          ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
        if: env.ACR_USERNAME != '' && env.ACR_PASSWORD != ''
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.acr_name }}
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}

      - name: Azure Login for ACR (OIDC)
        env:
          ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
        if: inputs.azure_oidc == true && env.ACR_USERNAME == ''
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Login to ACR via Azure CLI (OIDC)
        env:
          ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
        if: inputs.azure_oidc == true && env.ACR_USERNAME == ''
        run: |
          # Extract ACR name without .azurecr.io
          ACR_NAME=$(echo "${{ inputs.acr_name }}" | sed 's/.azurecr.io//')
          az acr login --name $ACR_NAME

      - name: Build and push Docker image
        if: success()
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ inputs.acr_name }}/${{ inputs.image_name }}:latest
            ${{ inputs.acr_name }}/${{ inputs.image_name }}:${{ github.sha }}
            ${{ inputs.acr_name }}/${{ inputs.image_name }}:ci-${{ github.run_id }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-scan
    if: inputs.staging_url != ''
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run DAST with OWASP ZAP
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: ${{ inputs.staging_url }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-scan
    if: inputs.deploy == true    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        if: inputs.azure_oidc == true
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set kubeconfig
        env:
          KUBECONFIG_DATA: ${{ inputs.kubeconfig || secrets.KUBE_CONFIG_DATA }}
        if: env.KUBECONFIG_DATA != ''
        run: |
          echo "$KUBECONFIG_DATA" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Deploy to AKS
        uses: ./.github/actions/deploy-aks
        with:
          acr_name: ${{ inputs.acr_name }}
          image_name: ${{ inputs.image_name }}
          image_tag: ${{ github.sha }}
          azure_oidc: ${{ inputs.azure_oidc }}

      - name: Post-deployment verification
        run: |
          echo "Deployment completed successfully"
          echo "Image: ${{ inputs.acr_name }}/${{ inputs.image_name }}:${{ github.sha }}"